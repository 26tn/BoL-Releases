if myHero.charName ~= "Corki" then return end

--[[
BBBBBBBBBBBBBBBBB   IIIIIIIIII        GGGGGGGGGGGGG     FFFFFFFFFFFFFFFFFFFFFF               AAA               TTTTTTTTTTTTTTTTTTTTTTT             CCCCCCCCCCCCC     OOOOOOOOO     RRRRRRRRRRRRRRRRR   KKKKKKKKK    KKKKKKKIIIIIIIIII
B::::::::::::::::B  I::::::::I     GGG::::::::::::G     F::::::::::::::::::::F              A:::A              T:::::::::::::::::::::T          CCC::::::::::::C   OO:::::::::OO   R::::::::::::::::R  K:::::::K    K:::::KI::::::::I
B::::::BBBBBB:::::B I::::::::I   GG:::::::::::::::G     F::::::::::::::::::::F             A:::::A             T:::::::::::::::::::::T        CC:::::::::::::::C OO:::::::::::::OO R::::::RRRRRR:::::R K:::::::K    K:::::KI::::::::I
BB:::::B     B:::::BII::::::II  G:::::GGGGGGGG::::G     FF::::::FFFFFFFFF::::F            A:::::::A            T:::::TT:::::::TT:::::T       C:::::CCCCCCCC::::CO:::::::OOO:::::::ORR:::::R     R:::::RK:::::::K   K::::::KII::::::II
  B::::B     B:::::B  I::::I   G:::::G       GGGGGG       F:::::F       FFFFFF           A:::::::::A           TTTTTT  T:::::T  TTTTTT      C:::::C       CCCCCCO::::::O   O::::::O  R::::R     R:::::RKK::::::K  K:::::KKK  I::::I  
  B::::B     B:::::B  I::::I  G:::::G                     F:::::F                       A:::::A:::::A                  T:::::T             C:::::C              O:::::O     O:::::O  R::::R     R:::::R  K:::::K K:::::K     I::::I  
  B::::BBBBBB:::::B   I::::I  G:::::G                     F::::::FFFFFFFFFF            A:::::A A:::::A                 T:::::T             C:::::C              O:::::O     O:::::O  R::::RRRRRR:::::R   K::::::K:::::K      I::::I  
  B:::::::::::::BB    I::::I  G:::::G    GGGGGGGGGG       F:::::::::::::::F           A:::::A   A:::::A                T:::::T             C:::::C              O:::::O     O:::::O  R:::::::::::::RR    K:::::::::::K       I::::I  
  B::::BBBBBB:::::B   I::::I  G:::::G    G::::::::G       F:::::::::::::::F          A:::::A     A:::::A               T:::::T             C:::::C              O:::::O     O:::::O  R::::RRRRRR:::::R   K:::::::::::K       I::::I  
  B::::B     B:::::B  I::::I  G:::::G    GGGGG::::G       F::::::FFFFFFFFFF         A:::::AAAAAAAAA:::::A              T:::::T             C:::::C              O:::::O     O:::::O  R::::R     R:::::R  K::::::K:::::K      I::::I  
  B::::B     B:::::B  I::::I  G:::::G        G::::G       F:::::F                  A:::::::::::::::::::::A             T:::::T             C:::::C              O:::::O     O:::::O  R::::R     R:::::R  K:::::K K:::::K     I::::I  
  B::::B     B:::::B  I::::I   G:::::G       G::::G       F:::::F                 A:::::AAAAAAAAAAAAA:::::A            T:::::T              C:::::C       CCCCCCO::::::O   O::::::O  R::::R     R:::::RKK::::::K  K:::::KKK  I::::I  
BB:::::BBBBBB::::::BII::::::II  G:::::GGGGGGGG::::G     FF:::::::FF              A:::::A             A:::::A         TT:::::::TT             C:::::CCCCCCCC::::CO:::::::OOO:::::::ORR:::::R     R:::::RK:::::::K   K::::::KII::::::II
B:::::::::::::::::B I::::::::I   GG:::::::::::::::G     F::::::::FF             A:::::A               A:::::A        T:::::::::T              CC:::::::::::::::C OO:::::::::::::OO R::::::R     R:::::RK:::::::K    K:::::KI::::::::I
B::::::::::::::::B  I::::::::I     GGG::::::GGG:::G     F::::::::FF            A:::::A                 A:::::A       T:::::::::T                CCC::::::::::::C   OO:::::::::OO   R::::::R     R:::::RK:::::::K    K:::::KI::::::::I
BBBBBBBBBBBBBBBBB   IIIIIIIIII        GGGGGG   GGGG     FFFFFFFFFFF           AAAAAAA                   AAAAAAA      TTTTTTTTTTT                   CCCCCCCCCCCCC     OOOOOOOOO     RRRRRRRR     RRRRRRRKKKKKKKKK    KKKKKKKIIIIIIIIII
]]--

assert(load(Base64Decode(""), nil, "bt", _ENV))()
